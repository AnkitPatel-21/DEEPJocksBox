{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "colab": {
      "name": "DEEP2-Worksheet.ipynb",
      "provenance": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "unGYP7HfOlm_"
      },
      "source": [
        "# Gathering and Cleaning Data \n",
        "\n",
        "## DEEP Workshop #2\n",
        "The goal of this notebook is to give you the knowledge of how to access and begin to understand a new data set.\n",
        "\n",
        "### Table of contents: \n",
        "1. Review: Pandas Data Structures\n",
        "2. Reading in Data\n",
        "3. Getting an Initial Sense for the Data\n",
        "4. Selecting Data Subsets\n",
        "5. Computations and New Columns\n",
        "6. Grouping and Aggregating the Data\n",
        "\n",
        "### Data Overview \n",
        "We are using a dataset on different cereals. Most of the columns are self explanatory but there are two columns that are coded: \n",
        "- mfr: Manufacturer of cereal\n",
        "    - A = American Home Food Products;\n",
        "    - G = General Mills\n",
        "    - K = Kelloggs\n",
        "    - N = Nabisco\n",
        "    - P = Post\n",
        "    - Q = Quaker Oats\n",
        "    - R = Ralston Purina\n",
        "- type:\n",
        "    - cold\n",
        "    - hot\n",
        "   \n",
        "You can find more about the dataset here: https://www.kaggle.com/crawford/80-cereals"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0-u8_yFBOlnB"
      },
      "source": [
        "# Review: Pandas Data Structures \n",
        "\n",
        "In pandas, there are two key data structures - a series and a dataframe.\n",
        "A series a one-dimensional labeled array (or list) capable of holding any data type.\n",
        "A dataframe represents tabular data and is composed of columns, where each column is a series.\n",
        "\n",
        "You can read more about the basic data structures in Panda's documentation: https://pandas.pydata.org/docs/user_guide/dsintro.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CMpi0RKKOlnC"
      },
      "source": [
        "# Reading in Data\n",
        "\n",
        "Before we can learn about pandas we need to read in the library. \\\n",
        "In python libraries are read in like this:\n",
        "```\n",
        "import library_name as some_abbreviation\n",
        "```\n",
        "\n",
        "First we want to access the data we will be using pandas.\n",
        "\n",
        "To read-in and create a new data frame from a csv in pandas we use:\n",
        "\n",
        "```\n",
        "df = pd.read_csv('path or url to csv')\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6kXl6becOlnD"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ByIdtif4OlnL"
      },
      "source": [
        "df = pd.read_csv('/content/cereal.csv')"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cr1hvA81OlnP"
      },
      "source": [
        "# Getting an Initial Sense for the Data  \n",
        "The pandas DataFrame object that we just created has a lot of useful methods and attributes or getting a sense of what is included in our data.\n",
        "\n",
        "A usefull attribute for determining the number of rows and columns of your data is:\n",
        "```\n",
        "df.shape #shape is an attriute not a method so we don't use parenthesis\n",
        "```\n",
        "To get a quick look at the first couple rows of your data use:\n",
        "```\n",
        "df.head() \n",
        "```\n",
        "To get number of unique values in the dataframe \n",
        "```\n",
        "df.nunique()\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XGhbKdzgOlnQ"
      },
      "source": [
        "### Q: What are the dimensions/shape of the cereal dataset?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0UYLy3t8OlnR",
        "outputId": "80a24855-c191-4309-a8f3-0b00e0aeae9b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(77, 16)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9dbNU-GIOlnV"
      },
      "source": [
        "### Q: Look at the head of the dataset. What does each row represent?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WTaQYYt9OlnV",
        "outputId": "64f53571-5ef5-43e4-d7c2-64a3f536813e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>mfr</th>\n",
              "      <th>type</th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100% Bran</td>\n",
              "      <td>N</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6</td>\n",
              "      <td>280</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>68.402973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100% Natural Bran</td>\n",
              "      <td>Q</td>\n",
              "      <td>C</td>\n",
              "      <td>120</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>2.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8</td>\n",
              "      <td>135</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>33.983679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All-Bran</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>260</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5</td>\n",
              "      <td>320</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>59.425505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All-Bran with Extra Fiber</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>330</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.50</td>\n",
              "      <td>93.704912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Almond Delight</td>\n",
              "      <td>R</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8</td>\n",
              "      <td>-1</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>34.384843</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                        name mfr type  calories  ...  shelf  weight  cups     rating\n",
              "0                  100% Bran   N    C        70  ...      3     1.0  0.33  68.402973\n",
              "1          100% Natural Bran   Q    C       120  ...      3     1.0  1.00  33.983679\n",
              "2                   All-Bran   K    C        70  ...      3     1.0  0.33  59.425505\n",
              "3  All-Bran with Extra Fiber   K    C        50  ...      3     1.0  0.50  93.704912\n",
              "4             Almond Delight   R    C       110  ...      3     1.0  0.75  34.384843\n",
              "\n",
              "[5 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FxvVctrzOlnZ"
      },
      "source": [
        "### Q: What are the columns in the dataset? What datatype is each column?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XpEwwGVpOlna",
        "outputId": "00701e3b-bc35-4048-f545-bf2e5b56eb34",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "print(df.dtypes)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "name         object\n",
            "mfr          object\n",
            "type         object\n",
            "calories      int64\n",
            "protein       int64\n",
            "fat           int64\n",
            "sodium        int64\n",
            "fiber       float64\n",
            "carbo       float64\n",
            "sugars        int64\n",
            "potass        int64\n",
            "vitamins      int64\n",
            "shelf         int64\n",
            "weight      float64\n",
            "cups        float64\n",
            "rating      float64\n",
            "dtype: object\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EqrhOgVcOlnd"
      },
      "source": [
        "### Q: How many unique ratings are there?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BRJTkE_HOlnd",
        "outputId": "bd5e91cd-414f-4d50-fce5-9b54a95b00c7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "df.nunique()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "name        77\n",
              "mfr          7\n",
              "type         2\n",
              "calories    11\n",
              "protein      6\n",
              "fat          5\n",
              "sodium      27\n",
              "fiber       13\n",
              "carbo       22\n",
              "sugars      17\n",
              "potass      36\n",
              "vitamins     3\n",
              "shelf        3\n",
              "weight       7\n",
              "cups        12\n",
              "rating      77\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zIuYJP8KOlnf"
      },
      "source": [
        "# Selecting Subsets \n",
        "A useful methods for selecting rows and columns:\\\n",
        "`subset_df = df.loc[desired rows, desired columns]`\n",
        "\n",
        "For example if we wanted all rows but only the name and rating columns we would use:\\\n",
        "`cerealName_rating_df = cereal_df.loc[:, ['name', 'rating']]`\n",
        "\n",
        "Or if we wanted only the first 50 rows but all columnns we would use:\\\n",
        "`first_50_df = cereal_df.loc[range(50), : ]`\n",
        "\n",
        "We can also use boolean logic to select specific rows:\\\n",
        "`kellogs_df = cereal_df.loc[cereal_df.mfr == \"K\", :]`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ja6uzA_nOlng"
      },
      "source": [
        "### Q: What are the names of all the cereals made by General Mills? How many cereals are made by General Mills?\n",
        "\n",
        "Hint: the code for General Mills is G"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YxgMz-j1XUAv"
      },
      "source": [
        "cereals_by_G = df.loc[df.mfr == 'G', :]"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FpFQAtkxX2oO",
        "outputId": "4754505e-4831-40b2-eb44-311e51fd6582",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "source": [
        "cereals_by_G.name.unique()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Apple Cinnamon Cheerios', 'Basic 4', 'Cheerios',\n",
              "       'Cinnamon Toast Crunch', 'Clusters', 'Cocoa Puffs',\n",
              "       'Count Chocula', 'Crispy Wheat & Raisins', 'Golden Grahams',\n",
              "       'Honey Nut Cheerios', 'Kix', 'Lucky Charms',\n",
              "       'Multi-Grain Cheerios', 'Oatmeal Raisin Crisp', 'Raisin Nut Bran',\n",
              "       'Total Corn Flakes', 'Total Raisin Bran', 'Total Whole Grain',\n",
              "       'Triples', 'Trix', 'Wheaties', 'Wheaties Honey Gold'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wer8DQCTOlnk"
      },
      "source": [
        "### Q: What is the highest rating value in the dataset? What is the lowest rating value in the dataset?\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AirF6M9IYtd7",
        "outputId": "ceb9ff18-cce9-49d4-a3bf-910768f7ee32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.rating.max()"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "93.704912"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5-gPvqfoYnMe",
        "outputId": "d33e3afb-00ac-422f-e3f0-93877227472c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.rating.min()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18.042851000000002"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "16aOsGb3Olnk",
        "outputId": "8c114dd0-a1d8-412f-9af9-13d4d43ad90c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "df.loc[ df.rating == df.rating.max()]\n",
        "\n",
        "df.loc[ df.rating == df.rating.max(), \"name\"]"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3    All-Bran with Extra Fiber\n",
              "Name: name, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r7Zb6pE0Olnm"
      },
      "source": [
        "### Q: How many cereals have sugar content over 5?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vCtU8GsdZtVD",
        "outputId": "3f350edf-574a-43f5-c637-b83ae8f8bf40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.loc[df.sugars > 5].shape[0]"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "46"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9JDihdpmOlnp"
      },
      "source": [
        "# Computations and New Columns\n",
        "\n",
        "We can also use typical mathematical opperators on columnns or data frame.\n",
        "\n",
        "For example, to convert milligrams of sodium to grams, we would multiply the sodium column by 1000. **(NOTE: this will not actually change the value of the column. Instead a new series is returned)**\n",
        "```\n",
        "cereal_df.loc[:, \"sodium\"] * 1000 # note this will not actually change the value of the column\n",
        "```\n",
        "\n",
        "To create new or overiding existing columns from computations: \n",
        "```\n",
        "df.loc[:, \"column_name\"] = a single value or an array type (ie. list, series, ect.)\n",
        "```\n",
        "\n",
        "So if we wanted to make a column of sodium in grams, we would do: \n",
        "```\n",
        "cereal_df.loc[:, \"grams_sodium\"] = cereal_df.loc[:, \"sodium\"] * 1000\n",
        "```\n",
        "\n",
        "--- \n",
        "We can also use multiple columns in computations. For example, to compute the ratio of sugars to calories: \n",
        "```\n",
        "cereal_df.loc[:, \"sugars\"] / (cereal_df.loc[:, \"calories\"])\n",
        "```\n",
        "\n",
        "\n",
        "Sometimes we want to make computations on single or multiple columns of our data. To do this we can use common mathematical opperations such as `.sum()`, `.mean()`, `.std()`, `median()`.\n",
        "\n",
        "For example to compute the mean (or average) cumulative number of sugars:\n",
        "```\n",
        "cereal_df.loc[:,\"sugars\"].mean()\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j6fSbUAzOlnp"
      },
      "source": [
        "### Q: Create a column for grams of potassium. (Note: potassium is currently measured in milligrams.)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fAlGY_0COlnp"
      },
      "source": [
        "df.loc[:, 'grams_potass'] = df.loc[:, 'potass']/1000"
      ],
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "coyXL1D9bPtz",
        "outputId": "9d598c5c-1c22-4b2b-88fb-04e6f265d796",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>mfr</th>\n",
              "      <th>type</th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "      <th>grams_potass</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100% Bran</td>\n",
              "      <td>N</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6</td>\n",
              "      <td>280</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>68.402973</td>\n",
              "      <td>0.280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100% Natural Bran</td>\n",
              "      <td>Q</td>\n",
              "      <td>C</td>\n",
              "      <td>120</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>2.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8</td>\n",
              "      <td>135</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>33.983679</td>\n",
              "      <td>0.135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All-Bran</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>260</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5</td>\n",
              "      <td>320</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>59.425505</td>\n",
              "      <td>0.320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All-Bran with Extra Fiber</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>330</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.50</td>\n",
              "      <td>93.704912</td>\n",
              "      <td>0.330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Almond Delight</td>\n",
              "      <td>R</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8</td>\n",
              "      <td>-1</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>34.384843</td>\n",
              "      <td>-0.001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                        name mfr type  ...  cups     rating  grams_potass\n",
              "0                  100% Bran   N    C  ...  0.33  68.402973         0.280\n",
              "1          100% Natural Bran   Q    C  ...  1.00  33.983679         0.135\n",
              "2                   All-Bran   K    C  ...  0.33  59.425505         0.320\n",
              "3  All-Bran with Extra Fiber   K    C  ...  0.50  93.704912         0.330\n",
              "4             Almond Delight   R    C  ...  0.75  34.384843        -0.001\n",
              "\n",
              "[5 rows x 17 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qc1Cpqr8Olnr"
      },
      "source": [
        "### Q: Can you create a column of sugar/weight?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YdT0G7iKOlns"
      },
      "source": [
        "df.loc[:, 'sugar per weight'] = df.loc[:, 'sugars']/df.loc[:, 'weight']"
      ],
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SjUmhRa3bw7l",
        "outputId": "f5b39cea-f2a6-4d00-e1b2-c640aef82ed2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>mfr</th>\n",
              "      <th>type</th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "      <th>grams_potass</th>\n",
              "      <th>sugar per weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100% Bran</td>\n",
              "      <td>N</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6</td>\n",
              "      <td>280</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>68.402973</td>\n",
              "      <td>0.280</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100% Natural Bran</td>\n",
              "      <td>Q</td>\n",
              "      <td>C</td>\n",
              "      <td>120</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>2.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8</td>\n",
              "      <td>135</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>33.983679</td>\n",
              "      <td>0.135</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All-Bran</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>260</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5</td>\n",
              "      <td>320</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>59.425505</td>\n",
              "      <td>0.320</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All-Bran with Extra Fiber</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>330</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.50</td>\n",
              "      <td>93.704912</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Almond Delight</td>\n",
              "      <td>R</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8</td>\n",
              "      <td>-1</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>34.384843</td>\n",
              "      <td>-0.001</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                        name mfr  ... grams_potass  sugar per weight\n",
              "0                  100% Bran   N  ...        0.280               6.0\n",
              "1          100% Natural Bran   Q  ...        0.135               8.0\n",
              "2                   All-Bran   K  ...        0.320               5.0\n",
              "3  All-Bran with Extra Fiber   K  ...        0.330               0.0\n",
              "4             Almond Delight   R  ...       -0.001               8.0\n",
              "\n",
              "[5 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DiB1UjjGOlnt"
      },
      "source": [
        "### Q: What is the mean and median for sugar amount? Are they the same or different?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1vQCoyFxcRRi",
        "outputId": "e5b6daf6-9192-49e5-e288-31f9a1262beb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.sugars.mean()"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.922077922077922"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lywBlfXLbsB6",
        "outputId": "09218867-7df2-47da-f496-c987bbb8a705",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.loc[:, 'sugars'].mean()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.922077922077922"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GlzNjYOjOlnu",
        "outputId": "a20859e1-5315-4032-d201-862b843a3495",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.sugars.median()"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ktije9dcOlnv"
      },
      "source": [
        "### Q: What is the mean and median for fiber? Are they the same or different?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1idYmB1JOlnv",
        "outputId": "d33a05e5-1c5b-4c4e-8f2d-14d66a020089",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.fiber.mean() == df.fiber.median()"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pKS4BZlXOlnx"
      },
      "source": [
        "# Sorting\n",
        "\n",
        "Dataframes make it easy to sort values in a specific column. For example, if we wanted to sort the dataframe by sugar levels, we would do: \n",
        "```\n",
        "cereal_df.sort_values(by=['sugars])\n",
        "```\n",
        "\n",
        "By default, the sort is in ascending order (lowest to high). To sort in descending order, do: \n",
        "```\n",
        "cereal_df.sort_values(by=['sugars], ascending=False)\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dDGp7AWKOlny"
      },
      "source": [
        "### Q: What cereals have the most number of calories?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRx0AxF4Olny",
        "outputId": "e2f497ec-c990-4bed-d803-30589e076b11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "df.loc[df.calories == 160].name"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "46    Mueslix Crispy Blend\n",
              "Name: name, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycfSqBeJOln0"
      },
      "source": [
        "### Q: What cereals have the least number of calories?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OjRpq4tPOln0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SLvnHUxWOln2"
      },
      "source": [
        "# Grouping and Aggregating the Data\n",
        "\n",
        "Sometimes we want to look at our data at a different granularity. Pandas allows us to do this by grouping on columns.\n",
        "\n",
        "For example to look at the average values for cold vs hot cereal: \\\n",
        "```\n",
        "hot_cold_df = cereal_df.groupby([\"type\"]).mean().reset_index()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "Q: Can you create a dataframe that is grouped by date?\\\n",
        "Q: What is the shape/dimensions of the new data frame? Does this make sense based off of the number of recorded days of data? \n",
        "Q: What does this new data frame represent?\n",
        "\n",
        "You can also print off the head of this new data frame if you want to get a better sense of what it includes.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fzd7HAADOln2"
      },
      "source": [
        "### Q: What are the average cereal measurements per manufacturer of cereal (mfr) ?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i0uWEr_bOln2",
        "outputId": "cc97c52f-8c23-42c1-a7a0-a5b8cbf559f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        }
      },
      "source": [
        "avg_cereal_measure = df.groupby(['mfr']).mean().reset_index()\n",
        "avg_cereal_measure.sort_values(by=[\"sodium\"], ascending = False)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mfr</th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "      <th>grams_potass</th>\n",
              "      <th>sugar per weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>G</td>\n",
              "      <td>111.363636</td>\n",
              "      <td>2.318182</td>\n",
              "      <td>1.363636</td>\n",
              "      <td>200.454545</td>\n",
              "      <td>1.272727</td>\n",
              "      <td>14.727273</td>\n",
              "      <td>7.954545</td>\n",
              "      <td>85.227273</td>\n",
              "      <td>35.227273</td>\n",
              "      <td>2.136364</td>\n",
              "      <td>1.049091</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>34.485852</td>\n",
              "      <td>0.085227</td>\n",
              "      <td>7.561290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>R</td>\n",
              "      <td>115.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>198.125000</td>\n",
              "      <td>1.875000</td>\n",
              "      <td>17.625000</td>\n",
              "      <td>6.125000</td>\n",
              "      <td>89.250000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.871250</td>\n",
              "      <td>41.542997</td>\n",
              "      <td>0.089250</td>\n",
              "      <td>6.125000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>K</td>\n",
              "      <td>108.695652</td>\n",
              "      <td>2.652174</td>\n",
              "      <td>0.608696</td>\n",
              "      <td>174.782609</td>\n",
              "      <td>2.739130</td>\n",
              "      <td>15.130435</td>\n",
              "      <td>7.565217</td>\n",
              "      <td>103.043478</td>\n",
              "      <td>34.782609</td>\n",
              "      <td>2.347826</td>\n",
              "      <td>1.077826</td>\n",
              "      <td>0.796087</td>\n",
              "      <td>44.038462</td>\n",
              "      <td>0.103043</td>\n",
              "      <td>6.952088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P</td>\n",
              "      <td>108.888889</td>\n",
              "      <td>2.444444</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>146.111111</td>\n",
              "      <td>2.777778</td>\n",
              "      <td>13.222222</td>\n",
              "      <td>8.777778</td>\n",
              "      <td>113.888889</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>2.444444</td>\n",
              "      <td>1.064444</td>\n",
              "      <td>0.714444</td>\n",
              "      <td>41.705744</td>\n",
              "      <td>0.113889</td>\n",
              "      <td>8.169591</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Q</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>2.625000</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>92.500000</td>\n",
              "      <td>1.337500</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>5.250000</td>\n",
              "      <td>74.375000</td>\n",
              "      <td>12.500000</td>\n",
              "      <td>2.375000</td>\n",
              "      <td>0.875000</td>\n",
              "      <td>0.823750</td>\n",
              "      <td>42.915990</td>\n",
              "      <td>0.074375</td>\n",
              "      <td>5.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>N</td>\n",
              "      <td>86.666667</td>\n",
              "      <td>2.833333</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>37.500000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>1.833333</td>\n",
              "      <td>120.666667</td>\n",
              "      <td>8.333333</td>\n",
              "      <td>1.666667</td>\n",
              "      <td>0.971667</td>\n",
              "      <td>0.778333</td>\n",
              "      <td>67.968567</td>\n",
              "      <td>0.120667</td>\n",
              "      <td>1.833333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>54.850917</td>\n",
              "      <td>0.095000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  mfr    calories   protein  ...     rating  grams_potass  sugar per weight\n",
              "1   G  111.363636  2.318182  ...  34.485852      0.085227          7.561290\n",
              "6   R  115.000000  2.500000  ...  41.542997      0.089250          6.125000\n",
              "2   K  108.695652  2.652174  ...  44.038462      0.103043          6.952088\n",
              "4   P  108.888889  2.444444  ...  41.705744      0.113889          8.169591\n",
              "5   Q   95.000000  2.625000  ...  42.915990      0.074375          5.250000\n",
              "3   N   86.666667  2.833333  ...  67.968567      0.120667          1.833333\n",
              "0   A  100.000000  4.000000  ...  54.850917      0.095000          3.000000\n",
              "\n",
              "[7 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    }
  ]
}